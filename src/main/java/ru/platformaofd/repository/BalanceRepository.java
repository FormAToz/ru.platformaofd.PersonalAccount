package ru.platformaofd.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.stereotype.Repository;
import ru.platformaofd.util.Utils;
import ru.platformaofd.model.Balance;

import javax.annotation.PostConstruct;
import java.util.List;

@Repository
public class BalanceRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private NamedParameterJdbcOperations namedParameterJdbcOperations;

    /**
     * Инициализация таблицы
     */
    @PostConstruct
    private void initDb() {
        System.out.println("Creating table Balances...");

        jdbcTemplate.execute("DROP TABLE balances IF EXISTS");
        jdbcTemplate.execute("CREATE TABLE balances(" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
                "user_id BIGINT, " +
                "count BIGINT, " +
                "type VARCHAR(100)," +
                "created TIMESTAMP WITH TIME ZONE)"
        );
    }

    /**
     * Метод сохранения нового баланса в базу
     * @param balance объект баланса
     * @return целочисленное значение - кол-во записей, в случае успешной вставки в базу
     */
    public int save(Balance balance) {
        return jdbcTemplate.update(
                "insert into balances(user_id, count, type, created) values(?,?,?,?)",
                balance.getUserId(), balance.getCount(), balance.getType().name(), balance.getCreated()
        );
    }

    /**
     * Метод получения списка всех балансов пользователя по его id
     * @param userId id пользователя
     * @return список балансов пользователя
     */
    public List<Balance> getAllBalancesByUserId(Long userId) {
        return namedParameterJdbcOperations.query(
                "select * from balances where user_id = :user_id",
                new MapSqlParameterSource("user_id", userId),
                (rs, rowNum) -> new Balance(
                        rs.getLong("id"),
                        rs.getLong("user_id"),
                        rs.getLong("count"),
                        Utils.getBalanceTypeFromString(rs.getString("type")),
                        Utils.getLocalDateTimeFromString(rs.getString("created"))
                )
        );
    }
}
